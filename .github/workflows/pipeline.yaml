name: Pipeline

on:
  pull_request:
    branches:
      - main

env:
  POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}

  TEST_POSTGRES_NAME: ${{ secrets.TEST_POSTGRES_NAME }}
  TEST_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  TEST_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  TEST_POSTGRES_PORT: ${{ secrets.TEST_POSTGRES_PORT }}
  TEST_POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}

  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_ACCESS_TTL: ${{ secrets.JWT_ACCESS_TTL }}
  JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}

  CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install --upgrade pip && pip install poetry && poetry install --no-interaction
      - name: Lint
        run: poetry run isort . && poetry run black .

  tests:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_NAME: ${{ env.POSTGRES_NAME }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      postgres_test:
        image: postgres:14
        ports:
          - 5433:5432
        env:
          POSTGRES_NAME: ${{ env.TEST_POSTGRES_NAME }}
          POSTGRES_USER: ${{ env.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.TEST_POSTGRES_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install --upgrade pip && pip install poetry && poetry install --no-interaction
      - name: Run migrations
        run: poetry run alembic upgrade head
      - name: Check coverage
        run: poetry run ./scripts/check-coverage.sh
      - name: Test auth
        run: poetry run pytest tests/test_auth.py

  docs:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install --upgrade pip && pip install poetry && poetry install --no-interaction
      - name: Sphinx build
        run: |
          poetry run sphinx-apidoc --output-dir docs/source . common --separate
          poetry run sphinx-build docs/source docs/build/html
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/html
          force_orphan: true

  ghcp:
    runs-on: ubuntu-22.04
    needs: tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Build and push Docker image to GHCR
        run: |
          docker buildx create --use
          docker buildx build -t ghcr.io/insolitum-team/roadmap-project/insolitum-learn:latest \
            --build-arg POSTGRES_NAME=${{ env.POSTGRES_NAME }} \
            --build-arg POSTGRES_USER=${{ env.POSTGRES_USER }} \
            --build-arg POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            --build-arg POSTGRES_PORT=${{ env.POSTGRES_PORT }} \
            --build-arg POSTGRES_HOST=${{ env.POSTGRES_HOST }} \
            --build-arg JWT_SECRET=${{ env.JWT_SECRET }} \
            --build-arg JWT_ACCESS_TTL=${{ env.JWT_ACCESS_TTL }} \
            --build-arg JWT_ALGORITHM=${{ env.JWT_ALGORITHM }} \
            --build-arg CORS_ORIGINS=${{ env.CORS_ORIGINS }} \
            .
          docker push ghcr.io/insolitum-team/roadmap-project/insolitum-learn:latest
